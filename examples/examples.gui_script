local button = require "in.button"

local function load_example(self, proxy)
	gui.set_enabled(gui.get_node("buttons"), false)
	gui.set_enabled(gui.get_node("back/button"), true)
	msg.post(proxy, "async_load")
	self.example = proxy
end

local function unload_example(self)
	gui.set_enabled(gui.get_node("buttons"), true)
	gui.set_enabled(gui.get_node("back/button"), false)
	msg.post(self.example, "unload")
	self.example = nil
end

function init(self)
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.15, 0.2, 0.3, 1.0) })
	button.acquire()

	gui.set_enabled(gui.get_node("back/button"), false)

	button.register("back/button", function()
		unload_example(self)
	end)

	local examples = {
		"gesture", "mapper", "cursor",
		"tester", "accelerometer", "button",
		"keyboard", "cursor_and_gesture",
		"onscreen_go", "onscreen_gui", "cursor_and_camera", "dropzone",
	}

	for _,example in ipairs(examples) do
		button.register(example .. "/button", function()
			load_example(self, "#" .. example .. "proxy")
		end)
	end
end

function final(self)
	button.release()
	button.unregister()
end

function on_input(self, action_id, action)
	button.on_input(action_id, action)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		print("disable")
		msg.post("/menucamera", "disable")
		msg.post(sender, "enable")
	elseif message_id == hash("proxy_unloaded") then
		msg.post("/menucamera", "enable")
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
